We will look in more detail at some of these parts later, but for now, note the following:

• Areas: This folder contains nested folders and 
a file needed to integrate your website project with ASP.NET Core Identity, 
which is used for authentication.

• bin, obj: These folders contain temporary files needed during the build process
 and the compiled assemblies for the project.

• Controllers: This folder contains C# classes that have methods 
(known as actions) that fetch a model and pass it to a view, for example, HomeController.cs.

• Data: This folder contains Entity Framework Core migration classes used by the 
ASP.NET Core Identity system to provide data storage for authentication and 
authorization, for example, ApplicationDbContext.cs.

• Models: This folder contains C# classes that represent all of the 
data gathered together by a controller and passed to a 
view, for example, ErrorViewModel.cs.

• Properties: This folder contains a configuration file for IIS 
or IIS Express on Windows and for launching the website during development 
named launchSettings.json. This file is only used on the local development machine 
and is not deployed to your production website.

• Views: This folder contains the .cshtml Razor files that combine HTML and 
C# code to dynamically generate HTML responses. The _ViewStart file sets the default layout and
 _ViewImports imports common namespaces used in all views like tag helpers:

• Home: This subfolder contains Razor files for the home and privacy pages.

• Shared: This subfolder contains Razor files for the shared layout, 
an error page, and two partial views for logging in and validation scripts.

• wwwroot: This folder contains static content used by the website, 
such as CSS for styling, libraries of JavaScript, JavaScript for this website project, and 
a favicon.ico file. You also put images and other static file resources like PDF documents 
in here. The project template includes Bootstrap and jQuery libraries.

• app.db: This is the SQLite database that stores registered visitors. 
(If you used SQL Server LocalDB, then it will not be needed.)

• appsettings.json and appsettings.Development.json: These files contain settings that 
your website can load at runtime, for example, the database connection string for 
the ASP.NET Core Identity system and logging levels.

• Northwind.Mvc.csproj: This file contains project settings like 
the use of the Web .NET SDK, an entry for SQLite to ensure that the app.db file is 
copied to the website's output folder, and a list of NuGet packages that your project requires, 
including:
• Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
• Microsoft.AspNetCore.Identity.EntityFrameworkCore
• Microsoft.AspNetCore.Identity.UI
• Microsoft.EntityFrameworkCore.Sqlite or Microsoft.EntityFrameworkCore.
SqlServer • Microsoft.EntityFrameworkCore.Tools

• Program.cs: This file defines a hidden Program class that contains the Main entry point. 
It builds a pipeline for processing incoming HTTP requests and 
hosts the website using default options like configuring the Kestrel web server and 
loading appsettings. It adds and configures services that your website needs, 
for example, ASP.NET Core Identity for authentication, SQLite or SQL Server 
for identity data storage, and so on, and routes for your application.